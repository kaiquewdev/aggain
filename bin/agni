#!/usr/bin/env node
var sudoBlock = require('sudo-block')('You not be able to perform this tool as root.');
var agni = require('../');
var agniCli = require('commander');
var chalk = require('chalk');
var pkg = require('../package');
var fs = require('fs');
var path = require('path');
var ctx = {};
var bannerLocation = path.resolve(__dirname, 'banner.txt');
var bannerData = fs.readFileSync(bannerLocation, 'utf-8');

agniCli
  .version(pkg.version)
  .option('-u, --up', 'Fire up the agni engine, in a existing structure.')
  .option('-s, --start [name]', 'Start up the agni engine, for the first time.')
  .option('-m, --module [name]', 'Create an module file.')
  .option('-d, --middleware [name]', 'Create an express middleware file or works with route command to address existing middlewares to and route.')
  .option('-l, --model [name]', 'Create a model file to work with schema, modules or plugins.')
  .option('-p, --plugin [name]', 'Create a plugin file to work with model.')
  .option('-c, --controller [name]', 'Create a controller or work with route to address and existing controller.')
  .option('-s, --configuration [name]', 'Create a configuration file.')
  //.option('-r, --route [uri] [method] [name] [middlewares] [controller] [view] or [rest]', 'Create route file with supply options.')
  //.option('-u, --uri [path]', 'Work with route command to put a route in a method.')
  //.option('-mt, --method [name]', 'Work with route command to put an method on route.')
  //.option('-b, --bin [name]', 'Create an executable file.')
  //.option('-d, --doc [name]', 'Create an doc file.')
  //.option('-v, --view [name]', 'Create a view or work with route command to address to a controller rendering trigger.')
  //.option('-dm, --doc-man [name]', 'Create an manual file.')
  //.option('-ci, --continuous-integration', 'Create a continuos integration configuration file.')
  //.option('-t, --track [name]', 'Create a track event.')
  //.option('-l, --log-pipe [name]', 'Create a log pipe configuration.')
  //.option('-w, --web-admin [port]', 'Run a web admin application of agni.')
  //.option('-j, --job [name]', 'Create a job file with consumer and producer.')
  //.option('-cn, --container [name]', 'Create a container file for docker.')
  .parse(process.argv);

if (!process.argv.slice(2).length) {
  bannerHandler();
  agniCli.help();
}

function bannerHandler() {
  console.log();
  console.log(bannerData);
  console.log();
}

function initHandler(err) {
  var self = this;

  if (err) {
    console.log(err);
  } else if (self.type === 'up') {
    console.log('Fire up this application!');
  } else if (self.type === 'start') {
    console.log('Application ' + self.name + ' was created!');
  }
}

function createHandler(err, timestamp) {
  var self = this;

  if (err) {
    console.log(err);
  } else {
    console.log(chalk.green('[ ' + timestamp + ' ]') + ' - ' + self.type + ' ' + self.name + ' was created!'); 
  }
}

function errorHandler(msg) {
  console.log(msg);
  process.exit(1);
}

if (agniCli.up && !agni.hasDotAgni(process.cwd())) {
  ctx = { type: 'up' };
  agni.up(process.cwd(), initHandler.bind(ctx));
} if ((typeof agniCli.start === 'string') && !agni.hasDotAgni(process.cwd())) {
  ctx = { name: agniCli.start || agniCli.s, type: 'start' };
  agni.start(process.cwd(), ctx.name, initHandler.bind(ctx));
} if ((typeof agniCli.module === 'string') && agni.hasDotAgni(process.cwd())) {
  ctx = { name: (agniCli.module), type: 'module' };
  agni.createModule(process.cwd(), ctx.name, createHandler.bind(ctx));
} if ((typeof agniCli.middleware === 'string') && agni.hasDotAgni(process.cwd())) {
  ctx = { name: (agniCli.middleware), type: 'middleware' };
  agni.createMiddleware(process.cwd(), ctx.name, createHandler.bind(ctx));
} if ((typeof agniCli.model === 'string') && agni.hasDotAgni(process.cwd())) {
  ctx = { name: (agniCli.model), type: 'model' };
  agni.createModel(process.cwd(), ctx.name, createHandler.bind(ctx));
} if ((typeof agniCli.plugin === 'string') && agni.hasDotAgni(process.cwd())) {
  ctx = { name: (agniCli.plugin), type: 'plugin' };
  agni.createPlugin(process.cwd(), ctx.name, createHandler.bind(ctx));
} if ((typeof agniCli.controller === 'string') && agni.hasDotAgni(process.cwd())) {
  ctx = { name: (agniCli.controller), type: 'controller' };
  agni.createController(process.cwd(), ctx.name, createHandler.bind(ctx));
} if ((typeof agniCli.configguration === 'string') && agni.hasDotAgni(process.cwd())) {
  ctx = { name: (agniCli.configuration), type: 'config' };
  agni.createConfig(process.cwd(), ctx.name, createHandler.bind(ctx));
} else if (agniCli.start && !(typeof agniCli.start === 'string')) {
  errorHandler('You need to pass the name of the ' + chalk.red('application') + ' when you try to start one. Try: ' + chalk.green('\`agni-gen --start [name]\`'));
} else if (agniCli.module && !(typeof agniCli.module === 'string')) {
  errorHandler('You need to pass the name of the ' + chalk.red('module') + ' when you try to create one. Try: ' + chalk.green('\`agni-gen --module [name]\`'));
} else if (agniCli.middleware && !(typeof agniCli.middleware === 'string')) {
  errorHandler('You need to pass the name of the ' + chalk.red('middleware') + ' when you try to create one. Try: ' + chalk.green('\`agni-gen --middleware [name]\`'));
} else if (agniCli.model && !(typeof agniCli.model === 'string')) {
  errorHandler('You need to pass the name of the ' + chalk.red('model') + ' when you try to create one. Try: ' + chalk.green('\`agni-gen --model [name]\`'));
} else if (agniCli.plugin && !(typeof agniCli.plugin === 'string')) {
  errorHandler('You need to pass the name of the ' + chalk.red('plugin') + ' when you try to create one. Try: ' + chalk.green('\`agni-gen --plugin [name]\`'));
} else if (agniCli.controller && !(typeof agniCli.controller === 'string')) {
  errorHandler('You need to pass the name of the ' + chalk.red('controller') + ' when you try to create one. Try: ' + chalk.green('\`agni-gen --controller [name]\`'));
} else if (agniCli.configuration && !(typeof agniCli.configuration === 'string')) {
  errorHandler('You need to pass the name of the ' + chalk.red('configuration') + ' when you try to create one. Try: ' + chalk.green('\`agni-gen --configuration [name]\`'));
}
